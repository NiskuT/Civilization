cmake_minimum_required (VERSION 3.0)
project (civilization)

# CMP0074 policy enable find_* to use <PackageName>_ROOT variables to find packages.
if(POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW)
endif()

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
include(GenerateDiaHeader)

# Export executables to "bin" directory
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Enable C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Enable Debug and Release builds
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug CACHE STRING
    "Build type, Debug or Release" FORCE)
endif()
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -Wall -std=c11   -pthread -g")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++17 -pthread -g")
ENDIF(CMAKE_COMPILER_IS_GNUCC)



# Add code coverage support for Gcov using GCC
set(BUILD_CODE_COVERAGE OFF CACHE BOOL
  "Set BUILD_CODE_COVERAGE to ON to enable code coverage")
if(BUILD_CODE_COVERAGE AND NOT UNIX)
  message(WARNING "Code coverage is only available for UNIX systems")
  set(BUILD_CODE_COVERAGE OFF)
elseif(BUILD_CODE_COVERAGE AND NOT CMAKE_COMPILER_IS_GNUCC AND NOT CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  message(WARNING "Code coverage is only available for GNU compiler and Clang compiler")
  set(BUILD_CODE_COVERAGE OFF)
endif()

message(STATUS "Code coverage: ${BUILD_CODE_COVERAGE}")
if(BUILD_CODE_COVERAGE)
  include(CodeCoverage)
  APPEND_COVERAGE_COMPILER_FLAGS()
  # Exclude all code not directly generated by user from code coverage
  set(COVERAGE_LCOV_EXCLUDES
    '/usr/*'
    '${PROJECT_SOURCE_DIR}/test/*'
    '${PROJECT_SOURCE_DIR}/3rdParty/*')
  set(COVERAGE_GCOVR_EXCLUDES
    /usr/
    "${PROJECT_SOURCE_DIR}/test/"
    "${PROJECT_SOURCE_DIR}/3rdParty/")
  # Create script to run tests for code coverage
  set(test_runner "${CMAKE_CURRENT_BINARY_DIR}/run_test.sh")
  file(WRITE ${test_runner}
    "cd \"${CMAKE_CURRENT_BINARY_DIR}/test\"\n"
    "ctest --timeout 300 ||/bin/true"
    )
  # Create target for code coverage
  SETUP_TARGET_FOR_COVERAGE_LCOV(
    NAME code-coverage
    EXECUTABLE sh ${test_runner}
    DEPENDS ${test_runner}
    )
  SETUP_TARGET_FOR_COVERAGE_GCOVR_XML(
    NAME code-coverage-gcov
    EXECUTABLE sh ${test_runner}
    DEPENDS ${test_runner}
    )
endif()


add_subdirectory(3rdParty)



#Â Add source subdirectories
add_subdirectory(src/client)
#add_subdirectory(src/shared)
#add_subdirectory(src/server)

